{"version":3,"sources":["components/main/UI/header/Header.module.css","components/main/UI/pages/Login/LogInPage.module.css","components/main/UI/pages/RefreshPassword/RefreshPassword.module.css","components/main/UI/pages/newPassword/NewPassword.module.css","components/main/UI/pages/Registration/Registration.module.css","components/main/UI/pages/Profile/Profile.module.css","components/main/UI/common/input/Input.module.css","components/main/UI/common/button/Button.module.css","components/main/UI/header/Header.tsx","components/main/UI/common/input/Input.tsx","components/main/UI/common/button/Button.tsx","components/main/UI/pages/Profile/Profile.tsx","components/main/UI/common/Preloader/Preloder.tsx","components/main/UI/pages/RefreshPassword/RefreshPassword.tsx","components/main/DAL/api.ts","components/main/BLL/forgot-reduser.ts","components/main/UI/pages/RefreshPassword/RefreshPasswordContainer.tsx","components/main/UI/pages/newPassword/NewPassword.tsx","components/main/BLL/newPassword-reduser.ts","components/main/UI/pages/newPassword/NewPasswordContainer.tsx","components/main/UI/pages/Login/LogInPage.tsx","components/main/BLL/login-reduser.ts","components/main/UI/pages/Login/LogInPageContainer.tsx","components/main/UI/pages/Registration/Registration.tsx","components/main/BLL/register-reduser.ts","components/main/UI/pages/Registration/RegistrationContainer.tsx","App.tsx","serviceWorker.ts","components/main/BLL/redux-store.ts","index.tsx"],"names":["module","exports","Header","props","className","styles","header","to","rout","CustomInput","onEnter","error","restProps","inputClass","type","onKeyPress","event","key","Button","buttonClass","Profile","baseSettings","container","Preloader","ForgotPassword","isFetching","unError","messageError","onClickForgotPassword","useState","email","setEmail","forgot","fagotForm","onSubmit","action","placeholder","onChange","e","target","value","disabled","instance","axios","create","baseURL","authAPI","password","rememberMe","post","html","html2","newPass","id","resetPasswordToken","initialState","actions","ForgotPasswordContainer","dispatch","useDispatch","useSelector","store","a","res","data","success","info","accepted","response","forgotPasswordSuccess","NewPassword","onClickNewPassword","newPassForm","NewPasswordContainer","useParams","pass","newPasswordSuccess","LoginPage","setUser","logIn","currentTarget","setPassword","checkbox","checked","setRememberMe","forgotPass","isSuccess","isError","isLoading","token","LoginPageContainer","login","getState","console","Registration","onInputPasswordChange","registration","name","inputArea","addUser","map","buttons","RegistrationContainer","passwordRepeat","setPasswordRepeat","isPasswordSame","setSamePassword","useEffect","register","App","exact","path","component","Boolean","window","location","hostname","match","reducers","combineReducers","state","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","unregister","catch","message"],"mappings":"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","file":"static/js/main.c8638446.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__O_PC8\",\"rout\":\"Header_rout__17_vR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LogInPage_container__1qDBs\",\"logIn\":\"LogInPage_logIn__2Zlu_\",\"checkbox\":\"LogInPage_checkbox__2tGba\",\"forgotPass\":\"LogInPage_forgotPass__2eiLz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgot\":\"RefreshPassword_forgot__2Udrk\",\"fagotForm\":\"RefreshPassword_fagotForm__3ARDu\",\"error\":\"RefreshPassword_error__8cZD5\",\"unError\":\"RefreshPassword_unError__3Ulfh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPass\":\"NewPassword_newPass__2J3cK\",\"newPassForm\":\"NewPassword_newPassForm__nNccJ\",\"error\":\"NewPassword_error__CSJfB\",\"unError\":\"NewPassword_unError__3Vvab\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Registration_container__3D76H\",\"inputArea\":\"Registration_inputArea__3LrSc\",\"buttons\":\"Registration_buttons__3aqbV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"baseSettings\":\"Profile_baseSettings__1X-89\",\"container\":\"Profile_container__reze-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputClass\":\"Input_inputClass__39JiE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"regularButton\":\"Button_regularButton__Dewfh\",\"deleteButton\":\"Button_deleteButton__1ZXBy\"};","import React from 'react';\r\nimport styles from './Header.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype PropsType = {}\r\n\r\n\r\nconst Header = (props: PropsType) => {\r\n    return <div className={styles.header}>\r\n        <NavLink to=\"/\" className={styles.rout}> Profile </NavLink>\r\n        <NavLink to=\"/login\" className={styles.rout}> Login </NavLink>\r\n        <NavLink to=\"/registration\" className={styles.rout}> Registration </NavLink>\r\n        <NavLink to=\"/refreshPassword\" className={styles.rout}> Remind password </NavLink>\r\n        <NavLink to=\"/set-new-password/:id\" className={styles.rout}> New password </NavLink>\r\n    </div>\r\n}\r\n\r\nexport default Header\r\n","import React, {DetailedHTMLProps, InputHTMLAttributes, ChangeEvent} from 'react';\r\nimport styles from './Input.module.css';\r\n\r\nexport type InputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n    & { onEnter?: () => void, error?: string };\r\n\r\nconst CustomInput = (props: InputPropsType) => {\r\n    const {onEnter, error, ...restProps} = props;\r\n\r\n    const onClickEnter = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (onEnter && event.key === \"Enter\") {\r\n            onEnter()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input className={styles.inputClass} {...restProps} type=\"text\" onKeyPress={onClickEnter}/>\r\n            {error ? <span>{error}</span> : ''}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CustomInput;\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\r\nimport styles from './Button.module.css';\r\n\r\ntype   ButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n    &\r\n    { buttonClass: string }\r\n\r\nconst Button = (props: ButtonPropsType) => {\r\n    const {...restProps} = props;\r\n    return (\r\n        <button className={styles[props.buttonClass]} {...restProps}/>\r\n    );\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport styles from './Profile.module.css';\r\nimport CustomInput from \"../../common/input/Input\";\r\nimport Button from \"../../common/button/Button\";\r\n\r\ntype PropsType = {}\r\n\r\n\r\nconst Profile = (props: PropsType) => {\r\n    return <div className={styles.baseSettings}>\r\n        <div>Basic style for button and input</div>\r\n        <div className={styles.container}>\r\n            <CustomInput/>\r\n            <Button buttonClass={'regularButton'}>Submit</Button>\r\n            <Button buttonClass={'deleteButton'}>Delete</Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Profile\r\n","import React from \"react\";\r\n\r\nconst Preloader = () => {\r\n\r\n  return <span>Loading....</span>\r\n\r\n}\r\n\r\nexport default Preloader;","import React, {ChangeEvent, useState} from 'react';\r\nimport styles from './RefreshPassword.module.css';\r\nimport CustomInput from \"../../common/input/Input\";\r\nimport Button from \"../../common/button/Button\";\r\nimport Preloader from \"../../common/Preloader/Preloder\";\r\n\r\ntype PropsType = {\r\n    onClickForgotPassword: (email: string) => void\r\n    isFetching: boolean\r\n    error: boolean\r\n    unError: boolean\r\n    messageError: string\r\n}\r\n\r\n\r\nconst ForgotPassword: React.FC<PropsType> = ({isFetching, error, unError, messageError, onClickForgotPassword}) => {\r\n\r\n    const [email, setEmail] = useState(\"\")\r\n\r\n    const handleSubmit = () => {\r\n        onClickForgotPassword(email)\r\n    }\r\n\r\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.target.value)\r\n    }\r\n\r\n    return <div className={styles.forgot}>\r\n        <h3>Refresh Password</h3>\r\n        {isFetching ? <Preloader/> : null}\r\n        {error\r\n            ? <span className={styles.error}>{messageError}</span>\r\n            : null\r\n        }\r\n        {unError\r\n            ? <span className={styles.unError}>Success</span>\r\n            : null\r\n        }\r\n        <form className={styles.fagotForm} onSubmit={handleSubmit} action=\"\">\r\n            <CustomInput placeholder=\"Email\" onChange={handleChange} value={email}/>\r\n            <Button disabled={isFetching} buttonClass={\"regularButton\"}>Submit</Button>\r\n        </form>\r\n    </div>\r\n}\r\n\r\nexport default ForgotPassword\r\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://cards-nya-back.herokuapp.com/1.0/\",\r\n})\r\n\r\nexport const authAPI = {\r\n    logIn(email: string, password: string, rememberMe: boolean) {\r\n        return (\r\n            instance.post<LoginResponseType>(`/auth/login`,\r\n                {\r\n                    email: email,\r\n                    password: password,\r\n                    rememberMe: rememberMe\r\n                }\r\n            )\r\n        )\r\n    },\r\n    registration(email: string, password: string) {\r\n        return instance.post<RegisterResponseType>(\"/auth/register\",\r\n            {\r\n                email: email,\r\n                password: password\r\n            }\r\n        )\r\n    },\r\n    forgotPass(email: string) {\r\n        return instance.post<ApiType>(\"auth/forgot\", {\r\n            email: email,\r\n            html: \"<a href='http://localhost:3000/#/newPassword'\",\r\n            html2: \"http://localhost:3000/?#/newPassword</a>\"\r\n        })\r\n\r\n    },\r\n    newPass(newPass: string, id: string) {\r\n        return instance.post<ApiType>(\"auth/set-new-password\", {\r\n            resetPasswordToken: id,\r\n            password: newPass\r\n        })\r\n    }\r\n\r\n}\r\n\r\n//__________ Types ______________\r\n\r\ntype LoginResponseType = {\r\n    email: string\r\n    name: string\r\n    isAdmin: boolean\r\n    rememberMe: boolean\r\n    token: string\r\n    tokenDeathTime: number\r\n    __v: number\r\n    _id: string\r\n    success: boolean\r\n    error: string\r\n    in: string\r\n}\r\n\r\n\r\ntype RegisterResponseType = {\r\n    addedUser: {\r\n        email: string,\r\n        isAdmin: boolean,\r\n        __v: number,\r\n        _id: string\r\n    },\r\n    success: boolean,\r\n    error: string\r\n}\r\n\r\n\r\ntype ApiType = {\r\n    info: { accepted: string }\r\n    password: string\r\n    success: boolean\r\n    config: {\r\n        data: string\r\n    }\r\n}\r\n","import {authAPI} from \"../DAL/api\";\r\nimport {baseThunkType, InferActionsTypes} from \"./redux-store\";\r\n\r\nconst initialState = {\r\n    email: \" \",\r\n    isFetching: false,\r\n    error: false,\r\n    unError: false,\r\n    messageError: \"\"\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const forgotReducer = (state: InitialStateType = initialState, action: ForgotActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"cards/forgot/SET_EMAIL\":\r\n            return {\r\n                ...state,\r\n                email: action.email,\r\n                unError: true,\r\n            }\r\n        case \"cards/forgot/TOGGLE_IS_FETCHING\":\r\n            return {\r\n                ...state, isFetching: action.isFetching\r\n            }\r\n        case \"cards/forgot/ERROR\":\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n                messageError: action.messageError\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\ntype ForgotActionType = InferActionsTypes<typeof actions>\r\n\r\nconst actions = {\r\n    forgotPassword: (email: string) => ({type: \"cards/forgot/SET_EMAIL\", email} as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: \"cards/forgot/TOGGLE_IS_FETCHING\", isFetching} as const),\r\n    changeError: (error: boolean, messageError: string) => ({type: \"cards/forgot/ERROR\", error, messageError} as const)\r\n}\r\n\r\ntype thunkType = baseThunkType<ForgotActionType>\r\n\r\nexport const forgotPasswordSuccess = (email: string): thunkType => async (dispatch) => {\r\n    dispatch(actions.toggleIsFetching(true))\r\n    try {\r\n        const res = await authAPI.forgotPass(email)\r\n        if (res.data.success) dispatch(actions.forgotPassword(res.data.info.accepted[0]))\r\n    } catch (e) {\r\n        dispatch(actions.changeError(true, e.response.data.error))\r\n    }\r\n    dispatch(actions.toggleIsFetching(false))\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport ForgotPassword from \"./RefreshPassword\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {forgotPasswordSuccess} from \"../../../BLL/forgot-reduser\";\r\nimport {AppStateType} from \"../../../BLL/redux-store\";\r\n\r\nconst ForgotPasswordContainer = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {isFetching, error, unError, messageError} = useSelector((store: AppStateType) => store.forgot)\r\n\r\n    const onClickForgotPassword = (email: string) => {\r\n        dispatch(forgotPasswordSuccess(email))\r\n    }\r\n\r\n    return <ForgotPassword error={error}\r\n                           unError={unError}\r\n                           isFetching={isFetching}\r\n                           messageError={messageError}\r\n                           onClickForgotPassword={onClickForgotPassword}/>\r\n\r\n}\r\n\r\nexport default ForgotPasswordContainer\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport CustomInput from \"../../common/input/Input\";\r\nimport Button from \"../../common/button/Button\";\r\nimport Preloader from \"../../common/Preloader/Preloder\";\r\nimport styles from \"./NewPassword.module.css\";\r\n\r\ntype PropsType = {\r\n    onClickNewPassword: (newPass: string) => void\r\n    isFetching: boolean\r\n    error: boolean\r\n    unError: boolean\r\n    messageError: string\r\n}\r\n\r\n\r\nconst NewPassword: React.FC<PropsType> = ({onClickNewPassword, isFetching, error, unError, messageError}) => {\r\n\r\n    const [newPass, setEmail] = useState(\"\")\r\n\r\n    const handleSubmit = () => {\r\n        onClickNewPassword(newPass)\r\n    }\r\n\r\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.target.value)\r\n    }\r\n\r\n    return <div className={styles.newPass}>\r\n        <h3>New Password</h3>\r\n        {isFetching ? <Preloader/> : null}\r\n        {error\r\n            ? <span className={styles.error}>{messageError}</span>\r\n            : null\r\n        }\r\n        {unError\r\n            ? <span className={styles.unError}>Success</span>\r\n            : null\r\n        }\r\n        <form className={styles.newPassForm} onSubmit={handleSubmit} action=\"\">\r\n            <CustomInput placeholder=\"Password\" onChange={handleChange} value={newPass}/>\r\n            <Button disabled={isFetching} buttonClass={\"regularButton\"}>Submit</Button>\r\n        </form>\r\n    </div>\r\n}\r\n\r\nexport default NewPassword\r\n","import {authAPI} from \"../DAL/api\";\r\nimport {baseThunkType, InferActionsTypes} from \"./redux-store\";\r\n\r\nconst initialState = {\r\n    password: \" \",\r\n    isFetching: false,\r\n    error: false,\r\n    unError: false,\r\n    messageError: \"\"\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const newPasswordReducer = (state: InitialStateType = initialState, action: NewPassActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"cards/newPassword/UPDATE_PASSWORD\":\r\n            return {\r\n                ...state,\r\n                password: action.password,\r\n                unError: true\r\n            }\r\n        case \"cards/newPassword/TOGGLE_IS_FETCHING\":\r\n            return {\r\n                ...state, isFetching: action.isFetching\r\n            }\r\n        case \"cards/newPassword/ERROR\":\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n                messageError: action.messageError\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\ntype NewPassActionType = InferActionsTypes<typeof actions>\r\n\r\nconst actions = {\r\n    newPassword: (password: string) => ({type: \"cards/newPassword/UPDATE_PASSWORD\", password} as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: \"cards/newPassword/TOGGLE_IS_FETCHING\", isFetching} as const),\r\n    changeError: (error: boolean, messageError: string) => ({\r\n        type: \"cards/newPassword/ERROR\",\r\n        error,\r\n        messageError\r\n    } as const)\r\n}\r\n\r\ntype thunkType = baseThunkType<NewPassActionType>\r\n\r\nexport const newPasswordSuccess = (pass: string, id: string): thunkType => async (dispatch) => {\r\n    dispatch(actions.toggleIsFetching(true))\r\n\r\n    try {\r\n        const res = await authAPI.newPass(pass, id)\r\n        if (res.data.success) dispatch(actions.newPassword(pass))\r\n    } catch (e) {\r\n        dispatch(actions.changeError(true, e.response.data.error))\r\n    }\r\n\r\n    dispatch(actions.toggleIsFetching(false))\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport NewPassword from \"./NewPassword\";\r\nimport {newPasswordSuccess} from \"../../../BLL/newPassword-reduser\";\r\nimport {useParams} from 'react-router-dom';\r\nimport {AppStateType} from \"../../../BLL/redux-store\";\r\n\r\nconst NewPasswordContainer = () => {\r\n\r\n    let {id} = useParams()\r\n\r\n    const dispatch = useDispatch()\r\n    const {isFetching, error, unError, messageError} = useSelector((store: AppStateType) => store.newPass)\r\n\r\n    const onClickNewPassword = (newPass: string) => {\r\n        dispatch(newPasswordSuccess(newPass, id))\r\n    }\r\n\r\n    return <NewPassword error={error}\r\n                        unError={unError}\r\n                        messageError={messageError}\r\n                        isFetching={isFetching}\r\n                        onClickNewPassword={onClickNewPassword}/>\r\n}\r\n\r\nexport default NewPasswordContainer\r\n","import React, {ChangeEvent} from 'react';\r\nimport CustomInput from \"../../common/input/Input\";\r\nimport Button from \"../../common/button/Button\";\r\nimport styles from './LogInPage.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\ntype PropsType = {\r\n    email: string\r\n    setEmail: (value: string) => void\r\n    password: string\r\n    setPassword: (value: string) => void\r\n    rememberMe: boolean\r\n    setRememberMe: (value: boolean) => void\r\n    setUser: () => void\r\n    isLoading: boolean\r\n    isError: boolean\r\n}\r\n\r\n\r\nconst LoginPage = (props: PropsType) => {\r\n    const onSubmit = () => {\r\n        props.setUser()\r\n    }\r\n\r\n    const onInputMailChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setEmail(e.currentTarget.value)\r\n    }\r\n\r\n    const onInputPasswordChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setPassword(e.currentTarget.value)\r\n    }\r\n\r\n    const onCheckboxChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setRememberMe(e.currentTarget.checked)\r\n    }\r\n    return (\r\n        <form className={styles.container} onSubmit={onSubmit}>\r\n            <h3>Log in</h3>\r\n            <div className={styles.logIn}>\r\n                <CustomInput type=\"email\" placeholder='Email' value={props.email} onChange={onInputMailChange}/>\r\n                <CustomInput type='password' placeholder='Password' value={props.password}\r\n                             onChange={onInputPasswordChange}/>\r\n            </div>\r\n            <div className={styles.checkbox}>\r\n                <input type='checkbox' checked={props.rememberMe as boolean} onChange={onCheckboxChange}/>\r\n                <div>Remember me</div>\r\n            </div>\r\n            <Button buttonClass=\"regularButton\">Log in</Button>\r\n            <NavLink to={'/refreshPassword'} className={styles.forgotPass}>Forgot password?</NavLink>\r\n            <NavLink to={'/registration'} className={styles.forgotPass}>I don`t have an account</NavLink>\r\n        </form>)\r\n\r\n}\r\nexport default LoginPage\r\n","import {AppStateType, baseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {authAPI} from \"../DAL/api\";\r\n\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    isSuccess: false,\r\n    isError: false,\r\n    isLoading: false,\r\n    token: '',\r\n    rememberMe: false\r\n}\r\n\r\n\r\nexport const loginReducer = (state = initialState, action: LoginActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'loginReducer/IS_SUCCESS':\r\n            return {\r\n                ...state,\r\n                isSuccess: action.value,\r\n                isError: false,\r\n                isLoading: false,\r\n                token: action.token\r\n            }\r\n        case 'loginReducer/IS_ERROR':\r\n            return {\r\n                ...state,\r\n                isError: action.value,\r\n                isSuccess: false,\r\n                isLoading: false\r\n            }\r\n        case 'loginReducer/IS_LOADING':\r\n            return {\r\n                ...state,\r\n                isLoading: action.value\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\n\r\n//____________ Actions________________\r\n\r\ntype LoginActionType = InferActionsTypes<typeof actions>\r\n\r\n\r\nconst actions = {\r\n    isSuccess: (value: boolean, token: string) => ({\r\n        type: 'loginReducer/IS_SUCCESS',\r\n        value,\r\n        token\r\n    } as const),\r\n    isError: (value: boolean) => ({type: 'loginReducer/IS_ERROR', value} as const),\r\n    isLoading: (value: boolean) => ({type: 'loginReducer/IS_LOADING', value} as const)\r\n}\r\n\r\n\r\n//__________________ thunk-creators __________________\r\n\r\ntype thunkType = baseThunkType<LoginActionType>\r\n\r\nexport const logIn = (email: string, password: string, rememberMe: boolean): thunkType => async (dispatch, getState: () => AppStateType) => {\r\n    dispatch(actions.isLoading(true))\r\n    try {\r\n        const res = await authAPI.logIn(email, password, rememberMe)\r\n        dispatch(actions.isSuccess(true, res.data.token))\r\n    } catch (e) {\r\n        dispatch(actions.isError(true))\r\n        console.error(e)\r\n    }\r\n}\r\n","import React, {useState} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from 'react-redux';\r\n\r\nimport LoginPage from \"./LogInPage\";\r\nimport {logIn} from \"../../../BLL/login-reduser\";\r\nimport {AppStateType} from \"../../../BLL/redux-store\";\r\n\r\n\r\nconst LoginPageContainer = () => {\r\n    const [email, setEmail] = useState<string>('')\r\n    const [password, setPassword] = useState<string>('')\r\n    const [rememberMe, setRememberMe] = useState<boolean>(false)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const setUser = () => {\r\n        dispatch(logIn(email, password, rememberMe))\r\n        setEmail('')\r\n        setPassword('')\r\n        setRememberMe(false)\r\n    }\r\n    const {isLoading, isSuccess, isError} = useSelector((store: AppStateType) => store.login)\r\n\r\n    if (isSuccess) {\r\n        return <Redirect to={\"/\"}/>\r\n    } else {\r\n        return (<LoginPage email={email}\r\n                           setEmail={setEmail}\r\n                           password={password}\r\n                           setPassword={setPassword}\r\n                           isError={isError}\r\n                           rememberMe={rememberMe}\r\n                           setRememberMe={setRememberMe}\r\n                           setUser={setUser}\r\n                           isLoading={isLoading}/>)\r\n\r\n    }\r\n}\r\n\r\nexport default LoginPageContainer\r\n","import React, {ChangeEvent} from 'react';\r\nimport CustomInput from \"../../common/input/Input\";\r\nimport Button from \"../../common/button/Button\";\r\nimport styles from \"./Registration.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype PropsType = {\r\n    email: string\r\n    setEmail: (text: string) => void\r\n    password: string\r\n    setPassword: (text: string) => void\r\n    addUser: () => void\r\n    passwordRepeat: string\r\n    setPasswordRepeat: (text: string) => void\r\n    isPasswordSame: boolean\r\n    isLoading: boolean\r\n    isError: boolean\r\n}\r\n\r\n\r\nconst Registration = (props: PropsType) => {\r\n\r\n    const onRegisterClick = () => {\r\n        props.addUser()\r\n    }\r\n\r\n    const onInputMailChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setEmail(e.currentTarget.value)\r\n    }\r\n\r\n    const onInputPasswordChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setPassword(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    const registration = [\r\n        {name: \"Email\", placeholder: 'Enter your Email...', type: 'email', onChange: onInputMailChange},\r\n        {name: \"Password\", placeholder: 'Enter your password...', type: 'password', onChange: onInputPasswordChange},\r\n        {name: \"Confirm Password\", placeholder: 'Enter your password confirmation...', onChange: onInputPasswordChange},\r\n    ]\r\n\r\n    return <div className={styles.container}>\r\n        <h3>Registration</h3>\r\n        <form className={styles.inputArea} onSubmit={onRegisterClick}>\r\n            {\r\n                registration.map(data => <div>\r\n                    <div>{data.name}</div>\r\n                    <CustomInput placeholder={data.placeholder} type={data.type} onChange={data.onChange}/>\r\n                </div>)\r\n            }\r\n            <div className={styles.buttons}>\r\n                <Button buttonClass={'regularButton'}>Sign up</Button>\r\n                <NavLink to={\"/\"}><Button buttonClass={'deleteButton'}>Cancel</Button></NavLink>\r\n            </div>\r\n        </form>\r\n    </div>\r\n}\r\n\r\nexport default Registration\r\n","import {AppStateType, baseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {authAPI} from \"../DAL/api\";\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    isSuccess: false,\r\n    isError: false,\r\n    isLoading: false\r\n\r\n}\r\n\r\n\r\nexport const registerReducer = (state = initialState, action: RegisterActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"registerReducer/REGISTER_IS_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                isSuccess: action.value\r\n            };\r\n        case \"registerReducer/REGISTER_IS_ERROR\":\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                isError: true\r\n            };\r\n        case \"registerReducer/REGISTER_IS_LOADING\":\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n// __________________ Actions __________________\r\n\r\ntype RegisterActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst actions = {\r\n    registerIsSuccess: (value: boolean) => ({type: \"registerReducer/REGISTER_IS_SUCCESS\", value} as const),\r\n    registerIsError: () => ({type: \"registerReducer/REGISTER_IS_ERROR\"} as const),\r\n    registerIsLoading: () => ({type: \"registerReducer/REGISTER_IS_LOADING\"} as const)\r\n}\r\n\r\n\r\n//__________________ thunk-creators __________________\r\n\r\ntype thunkType = baseThunkType<RegisterActionsType>\r\n\r\nexport const registration = (email: string, password: string): thunkType => async (dispatch, getState: () => AppStateType) => {\r\n    dispatch(actions.registerIsLoading)\r\n    try {\r\n        const res = await authAPI.registration(email, password)\r\n        if (res.data.success) dispatch(actions.registerIsSuccess(true))\r\n    } catch (e) {\r\n        dispatch(actions.registerIsError())\r\n        console.error(e)\r\n    }\r\n}\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport Registration from \"./Registration\";\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {registration} from \"../../../BLL/register-reduser\";\r\nimport {AppStateType} from \"../../../BLL/redux-store\";\r\n\r\n\r\nconst RegistrationContainer = () => {\r\n    const [email, setEmail] = useState<string>('');\r\n    const [password, setPassword] = useState<string>('');\r\n    const [passwordRepeat, setPasswordRepeat] = useState<string>('');\r\n    const [isPasswordSame, setSamePassword] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        if (passwordRepeat === password) setSamePassword(true)\r\n        else setSamePassword(false)\r\n    }, [passwordRepeat]);\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const addUser = () => {\r\n        dispatch(registration(email, password));\r\n        setEmail('');\r\n        setPassword('');\r\n        setPasswordRepeat('');\r\n    };\r\n\r\n    const {isLoading, isSuccess, isError} = useSelector((store: AppStateType) => store.register);\r\n\r\n    if (isSuccess) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return (<Registration email={email} setEmail={setEmail} password={password} setPassword={setPassword}\r\n                          passwordRepeat={passwordRepeat} setPasswordRepeat={setPasswordRepeat}\r\n                          isPasswordSame={isPasswordSame}\r\n                          addUser={addUser} isLoading={isLoading} isError={isError}/>\r\n    )\r\n}\r\n\r\nexport default RegistrationContainer\r\n","import React from 'react';\r\nimport {Route} from 'react-router-dom';\r\nimport './App.css';\r\nimport Header from './components/main/UI/header/Header';\r\nimport Profile from './components/main/UI/pages/Profile/Profile';\r\nimport ForgotPasswordContainer from \"./components/main/UI/pages/RefreshPassword/RefreshPasswordContainer\";\r\nimport NewPasswordContainer from \"./components/main/UI/pages/newPassword/NewPasswordContainer\";\r\nimport LoginPageContainer from \"./components/main/UI/pages/Login/LogInPageContainer\";\r\nimport RegistrationContainer from './components/main/UI/pages/Registration/RegistrationContainer';\r\n\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <Route exact path=\"/login\" component={LoginPageContainer}/>\r\n            <Route exact path=\"/registration\" component={RegistrationContainer}/>\r\n            <Route exact path=\"/refreshPassword\" component={ForgotPasswordContainer}/>\r\n            <Route path=\"/set-new-password/:id\">\r\n                <NewPasswordContainer/>\r\n            </Route>\r\n            <Route exact path=\"/\" component={Profile}/>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore, Action, combineReducers, applyMiddleware} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {loginReducer} from \"./login-reduser\";\r\nimport {registerReducer} from \"./register-reduser\";\r\nimport {forgotReducer} from \"./forgot-reduser\";\r\nimport {newPasswordReducer} from \"./newPassword-reduser\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    login: loginReducer,\r\n    register: registerReducer,\r\n    forgot: forgotReducer,\r\n    newPass: newPasswordReducer\r\n})\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\nexport default store;\r\n\r\n\r\n// ______type of state___________\r\n\r\ntype RootReducerType = typeof reducers\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n// ______type of actions___________\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsTypes<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesType<T>>\r\n\r\n\r\n// ______type of thunk-creator___________\r\n\r\nexport type baseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {HashRouter} from \"react-router-dom\";\nimport store from \"./components/main/BLL/redux-store\";\n\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
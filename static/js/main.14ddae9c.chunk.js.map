{"version":3,"sources":["components/main/UI/header/Header.module.css","components/main/UI/pages/Profile/Profile.module.css","components/main/UI/common/input/Input.module.css","components/main/UI/common/button/Button.module.css","components/main/UI/header/Header.tsx","components/main/UI/pages/Login/Login.tsx","components/main/UI/pages/Registration/Registration.tsx","components/main/UI/pages/RefreshPassword/RefreshPassword.tsx","components/main/UI/common/input/Input.tsx","components/main/UI/common/button/Button.tsx","components/main/UI/pages/Profile/Profile.tsx","App.tsx","serviceWorker.ts","components/main/BLL/login-reduser.ts","components/main/BLL/register-reduser.ts","components/main/BLL/redux-store.ts","index.tsx"],"names":["module","exports","Header","props","className","styles","header","to","rout","Login","Registration","RefreshPassword","CustomInput","onEnter","error","restProps","inputClass","type","onKeyPress","event","key","Button","buttonClass","Profile","baseSettings","container","App","exact","path","component","Boolean","window","location","hostname","match","initialState","text","reducers","combineReducers","login","state","action","register","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"kFACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,KAAO,uB,mBCAzDD,EAAOC,QAAU,CAAC,aAAe,8BAA8B,UAAY,6B,mBCA3ED,EAAOC,QAAU,CAAC,WAAa,4B,mBCA/BD,EAAOC,QAAU,CAAC,cAAgB,8BAA8B,aAAe,+B,yMCehEC,EATA,SAACC,GACZ,OAAO,yBAAKC,UAAWC,IAAOC,QAC1B,kBAAC,IAAD,CAASC,GAAG,IAAIH,UAAWC,IAAOG,MAAlC,aACA,kBAAC,IAAD,CAASD,GAAG,SAASH,UAAWC,IAAOG,MAAvC,WACA,kBAAC,IAAD,CAASD,GAAG,gBAAgBH,UAAWC,IAAOG,MAA9C,kBACA,kBAAC,IAAD,CAASD,GAAG,mBAAmBH,UAAWC,IAAOG,MAAjD,uBCAOC,EAND,SAACN,GACX,OAAO,uCCMIO,EAPM,SAACP,GAClB,OAAO,8CCKIQ,EANS,SAACR,GACrB,OAAO,kD,0CCgBIS,EAjBK,SAACT,GAA2B,IACrCU,EAAgCV,EAAhCU,QAASC,EAAuBX,EAAvBW,MAAUC,EADiB,YACJZ,EADI,qBAS3C,OACI,oCACI,yCAAOC,UAAWC,IAAOW,YAAgBD,EAAzC,CAAoDE,KAAK,OAAOC,WARnD,SAACC,GACdN,GAAyB,UAAdM,EAAMC,KACjBP,QAOCC,EAAQ,8BAAOA,GAAgB,K,iBCJ7BO,EAPA,SAAClB,GAA4B,IAC9BY,EAD6B,iBAChBZ,GACvB,OACI,0CAAQC,UAAWC,IAAOF,EAAMmB,cAAkBP,KCS3CQ,EAXC,SAACpB,GACb,OAAO,yBAAKC,UAAWC,IAAOmB,cAC1B,iEACA,yBAAKpB,UAAWC,IAAOoB,WACnB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQH,YAAa,iBAArB,UACA,kBAAC,EAAD,CAAQA,YAAa,gBAArB,aCUGI,EAbH,WACR,OACI,yBAAKtB,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,SAASC,UAAWpB,IACtC,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,gBAAgBC,UAAWnB,IAC7C,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,mBAAmBC,UAAWlB,IAChD,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,IAAIC,UAAWN,MCNzBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BCdAC,EAAe,CACjBC,KAAM,ICDJD,EAAe,CACjBC,KAAM,ICGNC,EAAWC,YAAgB,CAC3BC,MFAwB,WAAkE,IAAjEC,EAAgE,uDAAxDL,EAAcM,EAA0C,uCAGjF,OAFAA,EAAOxB,KAEAuB,GEFfE,SDD2B,WAAkE,IAAjEF,EAAgE,uDAAxDL,EAAcM,EAA0C,uCAGpF,OAFAA,EAAOxB,KAEAuB,KCEJG,EADDC,YAAYP,EAAUQ,YAAgBC,MCHpDC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAAC,EAAD,QAGRM,SAASC,eAAe,SJ2HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3C,GACL4C,QAAQ5C,MAAMA,EAAM6C,c","file":"static/js/main.14ddae9c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__O_PC8\",\"rout\":\"Header_rout__17_vR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"baseSettings\":\"Profile_baseSettings__1X-89\",\"container\":\"Profile_container__reze-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputClass\":\"Input_inputClass__39JiE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"regularButton\":\"Button_regularButton__Dewfh\",\"deleteButton\":\"Button_deleteButton__1ZXBy\"};","import React from 'react';\r\nimport styles from './Header.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype PropsType = {}\r\n\r\n\r\nconst Header = (props: PropsType) => {\r\n    return <div className={styles.header}>\r\n        <NavLink to=\"/\" className={styles.rout}> Profile </NavLink>\r\n        <NavLink to=\"/login\" className={styles.rout}> Login </NavLink>\r\n        <NavLink to=\"/registration\" className={styles.rout}> Registration </NavLink>\r\n        <NavLink to=\"/refreshPassword\" className={styles.rout}> Remind password </NavLink>\r\n    </div>\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\r\nimport styles from './Login.module.css';\r\n\r\ntype PropsType = {}\r\n\r\n\r\nconst Login = (props: PropsType) => {\r\n    return <div>\r\n        Login\r\n    </div>\r\n}\r\n\r\nexport default Login\r\n","import React from 'react';\r\nimport styles from './Registration.module.css';\r\n\r\ntype PropsType = {}\r\n\r\n\r\nconst Registration = (props: PropsType) => {\r\n    return <div>\r\n        Registration\r\n    </div>\r\n}\r\n\r\n\r\nexport default Registration\r\n","import React from 'react';\r\nimport styles from './RefreshPassword.module.css';\r\n\r\ntype PropsType = {}\r\n\r\n\r\nconst RefreshPassword = (props: PropsType) => {\r\n    return <div>\r\n        Refresh Password\r\n    </div>\r\n}\r\n\r\nexport default RefreshPassword\r\n","import React, {DetailedHTMLProps, InputHTMLAttributes, ChangeEvent} from 'react';\r\nimport styles from './Input.module.css';\r\n\r\nexport type InputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n    & { onEnter?: () => void, error?: string };\r\n\r\nconst CustomInput = (props: InputPropsType) => {\r\n    const {onEnter, error, ...restProps} = props;\r\n\r\n    const onClickEnter = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (onEnter && event.key === \"Enter\") {\r\n            onEnter()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input className={styles.inputClass} {...restProps} type=\"text\" onKeyPress={onClickEnter}/>\r\n            {error ? <span>{error}</span> : ''}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CustomInput;\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\r\nimport styles from './Button.module.css';\r\n\r\ntype   ButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n    &\r\n    { buttonClass: string }\r\n\r\nconst Button = (props: ButtonPropsType) => {\r\n    const {...restProps} = props;\r\n    return (\r\n        <button className={styles[props.buttonClass]} {...restProps}/>\r\n    );\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport styles from './Profile.module.css';\r\nimport CustomInput from \"../../common/input/Input\";\r\nimport Button from \"../../common/button/Button\";\r\n\r\ntype PropsType = {}\r\n\r\n\r\nconst Profile = (props: PropsType) => {\r\n    return <div className={styles.baseSettings}>\r\n        <div>Basic style for button and input</div>\r\n        <div className={styles.container}>\r\n            <CustomInput/>\r\n            <Button buttonClass={'regularButton'}>Submit</Button>\r\n            <Button buttonClass={'deleteButton'}>Delete</Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Profile\r\n","import React from 'react';\nimport {Route} from 'react-router-dom';\n\nimport './App.css';\nimport Header from './components/main/UI/header/Header';\nimport Login from './components/main/UI/pages/Login/Login';\nimport Registration from './components/main/UI/pages/Registration/Registration';\nimport RefreshPassword from \"./components/main/UI/pages/RefreshPassword/RefreshPassword\";\nimport Profile from './components/main/UI/pages/Profile/Profile';\n\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <Header/>\n            <Route exact path=\"/login\" component={Login}/>\n            <Route exact path=\"/registration\" component={Registration}/>\n            <Route exact path=\"/refreshPassword\" component={RefreshPassword}/>\n            <Route exact path=\"/\" component={Profile}/>\n        </div>\n    );\n    // логин, регистрация, восстановление пароля, профайл\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ActionsType } from \"./actions\"\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    text: ''\r\n}\r\n\r\n\r\nexport const loginReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n","import { ActionsType } from \"./actions\"\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    text: ''\r\n}\r\n\r\n\r\nexport const registerReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n","import {createStore, Action, combineReducers, applyMiddleware} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {loginReducer} from \"./login-reduser\";\r\nimport { registerReducer } from \"./register-reduser\";\r\n\r\n\r\n\r\nlet reducers = combineReducers({\r\n    login: loginReducer,\r\n    register: registerReducer\r\n})\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\nexport default store;\r\n\r\n\r\n\r\n\r\n\r\n// ______type of state___________\r\n\r\ntype RootReducerType = typeof reducers\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n// ______type of actions___________\r\n\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type InferActionsTypes<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesType<T>>\r\n\r\n\r\n// ______type of thunk-creator___________\r\n\r\nexport type baseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {HashRouter} from \"react-router-dom\";\nimport store from \"./components/main/BLL/redux-store\";\n\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}